{
  "name": "Multi-User JobBot Workflow v3.0",
  "nodes": [
    {
      "parameters": {
        "rule": "cron",
        "cronTime": "0 7 * * *",
        "timezone": "Europe/Oslo"
      },
      "id": "daily-trigger",
      "name": "Daily 7AM Trigger",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1.1,
      "position": [100, 300]
    },
    {
      "parameters": {
        "url": "http://jobbot_playwright:3000/api/users",
        "options": {}
      },
      "id": "get-users",
      "name": "Get All Users",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [300, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-1",
              "leftValue": "={{ $json.success }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-users-response",
      "name": "Check Users Response",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [500, 300]
    },
    {
      "parameters": {
        "jsCode": "// Extract users with AI profiles\nconst users = $input.first().json.users;\nconst activeUsers = [];\n\nfor (const [username, status] of Object.entries(users)) {\n  if (status.has_unified_profile && status.telegram_configured) {\n    activeUsers.push({\n      username: username,\n      resume_count: status.resume_count,\n      job_count: status.job_count\n    });\n  }\n}\n\nconsole.log(`Found ${activeUsers.length} active users`);\nreturn activeUsers.map(user => ({ json: user }));"
      },
      "id": "process-users",
      "name": "Process Active Users",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [700, 200]
    },
    {
      "parameters": {
        "url": "http://jobbot_playwright:3000/api/user/{{ $json.username }}/find_jobs",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{}",
        "options": {
          "timeout": 300000
        }
      },
      "id": "find-jobs",
      "name": "Find Jobs",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [900, 200]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-1",
              "leftValue": "={{ $json.jobs_found }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-jobs-found",
      "name": "Jobs Found?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1100, 200]
    },
    {
      "parameters": {
        "jsCode": "// Categorize jobs by relevance score\nconst data = $input.first().json;\nconst jobs = data.jobs || [];\nconst username = data.username;\n\nconst autoApplyJobs = jobs.filter(job => job.relevance_score >= 85);\nconst manualApprovalJobs = jobs.filter(job => job.relevance_score >= 30 && job.relevance_score < 85);\n\nconsole.log(`${username}: ${autoApplyJobs.length} auto-apply, ${manualApprovalJobs.length} manual approval`);\n\nreturn [{\n  json: {\n    username: username,\n    total_jobs: jobs.length,\n    auto_apply_jobs: autoApplyJobs,\n    manual_approval_jobs: manualApprovalJobs,\n    auto_apply_count: autoApplyJobs.length,\n    manual_approval_count: manualApprovalJobs.length\n  }\n}];"
      },
      "id": "categorize-jobs",
      "name": "Categorize Jobs",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1300, 100]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-1",
              "leftValue": "={{ $json.auto_apply_count }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "auto-apply-check",
      "name": "Auto Apply?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1500, 100]
    },
    {
      "parameters": {
        "url": "http://jobbot_playwright:3000/api/user/{{ $json.username }}/workflow",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"apply_jobs\": true\n}",
        "options": {
          "timeout": 600000
        }
      },
      "id": "run-auto-apply",
      "name": "Run Auto Apply",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1700, 50]
    },
    {
      "parameters": {
        "chatId": "={{ $env.TELEGRAM_CHAT_ID }}",
        "text": "🤖 JobBot Auto-Apply Report\n\n👤 User: {{ $json.username }}\n🎯 Jobs found: {{ $json.total_jobs }}\n✅ Auto-applied: {{ $json.auto_apply_count }}\n📱 Need approval: {{ $json.manual_approval_count }}\n\n🕒 {{ $now.format('DD.MM.YYYY HH:mm') }}"
      },
      "id": "telegram-auto-apply-report",
      "name": "Telegram Auto-Apply Report",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [1900, 50]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-1",
              "leftValue": "={{ $json.manual_approval_count }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "manual-approval-check",
      "name": "Manual Approval?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1500, 200]
    },
    {
      "parameters": {
        "jsCode": "// Create Telegram approval messages for manual jobs\nconst data = $input.first().json;\nconst manualJobs = data.manual_approval_jobs || [];\nconst username = data.username;\n\nconst messages = manualJobs.map((job, index) => {\n  return {\n    json: {\n      username: username,\n      job_index: index + 1,\n      job_title: job.title,\n      company: job.company,\n      relevance_score: job.relevance_score,\n      job_url: job.url,\n      recommendation: job.ai_analysis?.recommendation || 'REVIEW'\n    }\n  };\n});\n\nreturn messages;"
      },
      "id": "prepare-approval-messages",
      "name": "Prepare Approval Messages",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1700, 200]
    },
    {
      "parameters": {
        "chatId": "={{ $env.TELEGRAM_CHAT_ID }}",
        "text": "📋 Job Approval Request\n\n👤 User: {{ $json.username }}\n🏢 Position: {{ $json.job_title }}\n🏪 Company: {{ $json.company }}\n📊 AI Score: {{ $json.relevance_score }}%\n🤖 Recommendation: {{ $json.recommendation }}\n\n🔗 {{ $json.job_url }}\n\nShould I apply for this job?",
        "additionalFields": {
          "replyMarkup": {
            "inlineKeyboard": [
              [
                {
                  "text": "✅ Apply",
                  "callbackData": "apply_{{ $json.username }}_{{ $json.job_index }}"
                },
                {
                  "text": "❌ Skip",
                  "callbackData": "skip_{{ $json.username }}_{{ $json.job_index }}"
                }
              ]
            ]
          }
        }
      },
      "id": "telegram-approval-request",
      "name": "Telegram Approval Request",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [1900, 200]
    },
    {
      "parameters": {
        "chatId": "={{ $env.TELEGRAM_CHAT_ID }}",
        "text": "📭 No relevant jobs found\n\n👤 User: {{ $json.username }}\n🔍 Search completed\n\n🕒 {{ $now.format('DD.MM.YYYY HH:mm') }}"
      },
      "id": "telegram-no-jobs",
      "name": "No Jobs Found",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [1300, 300]
    },
    {
      "parameters": {
        "chatId": "={{ $env.TELEGRAM_CHAT_ID }}",
        "text": "❌ Error in JobBot workflow\n\n{{ $json.error }}\n\n🕒 {{ $now.format('DD.MM.YYYY HH:mm') }}"
      },
      "id": "telegram-error",
      "name": "Error Notification",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [700, 400]
    }
  ],
  "connections": {
    "daily-trigger": {
      "main": [
        [
          {
            "node": "get-users",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get-users": {
      "main": [
        [
          {
            "node": "check-users-response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check-users-response": {
      "main": [
        [
          {
            "node": "process-users",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "telegram-error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "process-users": {
      "main": [
        [
          {
            "node": "find-jobs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "find-jobs": {
      "main": [
        [
          {
            "node": "check-jobs-found",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check-jobs-found": {
      "main": [
        [
          {
            "node": "categorize-jobs",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "telegram-no-jobs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "categorize-jobs": {
      "main": [
        [
          {
            "node": "auto-apply-check",
            "type": "main",
            "index": 0
          },
          {
            "node": "manual-approval-check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "auto-apply-check": {
      "main": [
        [
          {
            "node": "run-auto-apply",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "run-auto-apply": {
      "main": [
        [
          {
            "node": "telegram-auto-apply-report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "manual-approval-check": {
      "main": [
        [
          {
            "node": "prepare-approval-messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "prepare-approval-messages": {
      "main": [
        [
          {
            "node": "telegram-approval-request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-07-08T00:00:00.000Z",
  "versionId": "1"
}
