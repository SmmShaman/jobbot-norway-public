"""Complete AI-powered application system using real resume data."""
import asyncio
import os
from playwright.async_api import async_playwright
from resume_loader import create_ai_prompt, load_user_resume
from openai import AzureOpenAI


class CompleteApplicationSystem:
    def __init__(self):
        self.client = AzureOpenAI(
            azure_endpoint=os.getenv("OPENAI_ENDPOINT"),
            api_key=os.getenv("OPENAI_KEY"),
            api_version="2024-05-01-preview"
        )
    
    async def create_personalized_application(self, job_title, company, job_description, username):
        """Create personalized application based on real resume."""
        print(f"üìã –°—Ç–≤–æ—Ä—é—î–º–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É –∑–∞—è–≤–∫—É –¥–ª—è {username}")
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ä–µ–∞–ª—å–Ω–µ —Ä–µ–∑—é–º–µ
        resume_data = load_user_resume(username)
        ai_prompt = create_ai_prompt(username)
        
        print(f"‚úÖ –†–µ–∑—é–º–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {resume_data['candidate_name']}")
        print(f"üìä –î–æ—Å–≤—ñ–¥: {resume_data['experience_years']} —Ä–æ–∫—ñ–≤")
        
        # AI –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏
        application_prompt = f"""
–ù–∞ –æ—Å–Ω–æ–≤—ñ –†–ï–ê–õ–¨–ù–û–ì–û —Ä–µ–∑—é–º–µ —Å—Ç–≤–æ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É –∑–∞—è–≤–∫—É –Ω–æ—Ä–≤–µ–∑—å–∫–æ—é –º–æ–≤–æ—é.

–í–ê–ö–ê–ù–°–Ü–Ø:
–ü–æ—Å–∞–¥–∞: {job_title}
–ö–æ–º–ø–∞–Ω—ñ—è: {company}
–û–ø–∏—Å: {job_description[:800]}

–†–ï–ê–õ–¨–ù–ï –†–ï–ó–Æ–ú–ï –ö–ê–ù–î–ò–î–ê–¢–ê:
{ai_prompt}

–ó–ê–í–î–ê–ù–ù–Ø:
–°—Ç–≤–æ—Ä–∏ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω—É –∑–∞—è–≤–∫—É –Ω–æ—Ä–≤–µ–∑—å–∫–æ—é –º–æ–≤–æ—é (150-250 —Å–ª—ñ–≤) —â–æ:
1. –ü—ñ–¥–∫—Ä–µ—Å–ª—é—î –†–ï–ê–õ–¨–ù–ò–ô –¥–æ—Å–≤—ñ–¥ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
2. –ü–æ–∫–∞–∑—É—î —è–∫ –¥–æ—Å–≤—ñ–¥ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–æ –≤–∞–∫–∞–Ω—Å—ñ—ó
3. –ó–≥–∞–¥—É—î –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –Ω–∞–≤–∏—á–∫–∏ –∑ —Ä–µ–∑—é–º–µ
4. –ú–∞—î –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –Ω–æ—Ä–≤–µ–∑—å–∫–∏–π —Ç–æ–Ω
5. –ü–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –¥–ª—è {company}

–ü–æ–≤–µ—Ä–Ω–∏ JSON:
{{
    "cover_letter": "–ø–æ–≤–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–æ—Ä–≤–µ–∑—å–∫–æ—é –º–æ–≤–æ—é",
    "key_skills_match": ["—è–∫—ñ –Ω–∞–≤–∏—á–∫–∏ –∑ —Ä–µ–∑—é–º–µ –ø—ñ–¥—Ö–æ–¥—è—Ç—å"],
    "experience_highlight": "–≥–æ–ª–æ–≤–Ω–∏–π –¥–æ—Å–≤—ñ–¥ —â–æ —Ç—Ä–µ–±–∞ –ø—ñ–¥–∫—Ä–µ—Å–ª–∏—Ç–∏",
    "motivation": "—á–æ–º—É —Ü—ñ–∫–∞–≤–∞ —Ü—è –ø–æ–∑–∏—Ü—ñ—è"
}}
"""
        
        try:
            response = self.client.chat.completions.create(
                model=os.getenv("AZURE_OPENAI_DEPLOYMENT_CHAT", "gpt-4"),
                messages=[{"role": "user", "content": application_prompt}],
                max_tokens=1500,
                temperature=0.7
            )
            
            import json
            result = json.loads(response.choices[0].message.content)
            
            # –î–æ–¥–∞—î–º–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∑ —Ä–µ–∑—é–º–µ
            result['personal_data'] = {
                'first_name': 'Vitalii',
                'last_name': 'Berbeha',
                'full_name': resume_data['candidate_name'],
                'email': 'stuardbmw@gmail.com',  # –ó config.json
                'phone': '+47 925 64 334',  # –ó config.json
                'city': 'Lena, Norway'
            }
            
            return result
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏: {e}")
            return self._get_fallback_application(resume_data, job_title, company)
    
    def _get_fallback_application(self, resume_data, job_title, company):
        """Fallback –∑–∞—è–≤–∫–∞ —è–∫—â–æ AI –Ω–µ –ø—Ä–∞—Ü—é—î."""
        return {
            "cover_letter": f"""Kj√¶re {company} team,

Jeg skriver for √• uttrykke min interesse for stillingen som {job_title}. Med mine {resume_data['experience_years']} √•rs erfaring innen prosjektledelse og teknologiutvikling, tror jeg at jeg kan bidra positivt til teamet deres.

Min bakgrunn inkluderer:
- Omfattende erfaring med AI-verkt√∏y og automatisering
- Prosjektledelse og SaaS-applikasjonsutvikling
- Entrepren√∏riell erfaring og forretningsutvikling
- Flerspr√•klig kompetanse (ukrainsk, russisk, norsk, engelsk)

Jeg ser frem til muligheten til √• diskutere hvordan mine ferdigheter kan st√∏tte {company} sine m√•l.

Med vennlig hilsen,
{resume_data['candidate_name']}""",
            "key_skills_match": resume_data['skills_list'][:3],
            "experience_highlight": f"{resume_data['experience_years']} √•rs erfaring i prosjektledelse",
            "motivation": f"Interessert i √• bidra til {company} med teknologiske l√∏sninger",
            "personal_data": {
                'first_name': 'Vitalii',
                'last_name': 'Berbeha',
                'full_name': resume_data['candidate_name'],
                'email': 'stuardbmw@gmail.com',
                'phone': '+47 925 64 334',
                'city': 'Lena, Norway'
            }
        }
    
    async def smart_fill_iframe_form(self, frame, application_data):
        """Smart form filling using real application data."""
        print(f"\nüìù –ó–ê–ü–û–í–ù–ï–ù–ù–Ø –§–û–†–ú–ò –†–ï–ê–õ–¨–ù–ò–ú–ò –î–ê–ù–ò–ú–ò")
        print("-" * 40)
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –ø–æ–ª—è
        inputs = await frame.query_selector_all('input')
        textareas = await frame.query_selector_all('textarea')
        
        filled_count = 0
        personal_data = application_data['personal_data']
        cover_letter = application_data['cover_letter']
        
        # –ó–∞–ø–æ–≤–Ω—é—î–º–æ input –ø–æ–ª—è
        for input_el in inputs:
            try:
                input_type = await input_el.get_attribute('type') or 'text'
                name = (await input_el.get_attribute('name') or '').lower()
                id_attr = (await input_el.get_attribute('id') or '').lower()
                placeholder = (await input_el.get_attribute('placeholder') or '').lower()
                
                field_text = f"{name} {id_attr} {placeholder}"
                
                # –í–∏–∑–Ω–∞—á–∞—î–º–æ —â–æ –∑–∞–ø–æ–≤–Ω—è—Ç–∏
                if input_type == 'hidden':
                    continue
                elif any(word in field_text for word in ['fornavn', 'first', 'fname']):
                    await input_el.fill(personal_data['first_name'])
                    print(f"‚úÖ First name: {personal_data['first_name']}")
                    filled_count += 1
                elif any(word in field_text for word in ['etternavn', 'last', 'lname', 'surname']):
                    await input_el.fill(personal_data['last_name'])
                    print(f"‚úÖ Last name: {personal_data['last_name']}")
                    filled_count += 1
                elif any(word in field_text for word in ['email', 'e-post', 'mail']):
                    await input_el.fill(personal_data['email'])
                    print(f"‚úÖ Email: {personal_data['email']}")
                    filled_count += 1
                elif any(word in field_text for word in ['phone', 'telefon', 'mobil', 'tlf']):
                    await input_el.fill(personal_data['phone'])
                    print(f"‚úÖ Phone: {personal_data['phone']}")
                    filled_count += 1
                elif any(word in field_text for word in ['by', 'city', 'sted', 'location']):
                    await input_el.fill(personal_data['city'])
                    print(f"‚úÖ City: {personal_data['city']}")
                    filled_count += 1
                elif input_type == 'checkbox' and any(word in field_text for word in ['godtar', 'agree', 'vilk√•r']):
                    await input_el.click()
                    print(f"‚úÖ Checkbox agreement")
                    filled_count += 1
                    
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑ input: {e}")
        
        # –ó–∞–ø–æ–≤–Ω—é—î–º–æ textarea cover letter
        for textarea in textareas:
            try:
                await textarea.fill(cover_letter)
                print(f"‚úÖ Cover letter –∑–∞–ø–æ–≤–Ω–µ–Ω–æ ({len(cover_letter)} —Å–∏–º–≤–æ–ª—ñ–≤)")
                filled_count += 1
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑ textarea: {e}")
        
        return filled_count
    
    async def test_complete_system(self):
        """Test complete system with real resume data."""
        print("üöÄ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ü–û–í–ù–û–á –°–ò–°–¢–ï–ú–ò –ó –†–ï–ê–õ–¨–ù–ò–ú –†–ï–ó–Æ–ú–ï")
        print("=" * 60)
        
        # –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –≤–∞–∫–∞–Ω—Å—ñ—ó
        job_data = {
            'title': 'Project Manager - AI/Tech',
            'company': 'KillNoise',
            'description': 'We are looking for an experienced project manager with AI and technology background to lead our innovation projects.'
        }
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É –∑–∞—è–≤–∫—É
        application = await self.create_personalized_application(
            job_data['title'],
            job_data['company'],
            job_data['description'],
            'vitalii'
        )
        
        print(f"\nüìã –°–¢–í–û–†–ï–ù–ê –ó–ê–Ø–í–ö–ê:")
        print("-" * 25)
        print(f"üéØ –ü—ñ–¥—Ö–æ–¥—è—â—ñ –Ω–∞–≤–∏—á–∫–∏: {application['key_skills_match']}")
        print(f"‚≠ê –ö–ª—é—á–æ–≤–∏–π –¥–æ—Å–≤—ñ–¥: {application['experience_highlight']}")
        print(f"\nüìù –ó–∞—è–≤–∫–∞ –Ω–æ—Ä–≤–µ–∑—å–∫–æ—é:")
        print(application['cover_letter'])
        
        # –¢–µ—Å—Ç—É—î–º–æ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏
        async with async_playwright() as p:
            browser = await p.chromium.launch(headless=True, args=['--no-sandbox'])
            page = await browser.new_page()
            
            try:
                print(f"\nüåê –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–æ—Ä–º—É KillNoise...")
                await page.goto('https://killnoi.se/?dest=application&country=no', timeout=30000)
                await page.wait_for_timeout(8000)
                
                # –ó–Ω–∞—Ö–æ–¥–∏–º–æ iframe –∑ —Ñ–æ—Ä–º–æ—é
                form_frame = None
                for frame in page.frames:
                    try:
                        inputs = await frame.query_selector_all('input')
                        if len(inputs) > 10:
                            form_frame = frame
                            break
                    except:
                        continue
                
                if form_frame:
                    filled_count = await self.smart_fill_iframe_form(form_frame, application)
                    
                    # –†–µ–∑—É–ª—å—Ç–∞—Ç
                    await page.screenshot(path='/app/data/screenshots/complete_system_result.png', full_page=True)
                    
                    print(f"\nüìä –§–Ü–ù–ê–õ–¨–ù–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
                    print("-" * 25)
                    print(f"‚úÖ –ó–∞–ø–æ–≤–Ω–µ–Ω–æ –ø–æ–ª—ñ–≤: {filled_count}")
                    print(f"üì∏ –°–∫—Ä—ñ–Ω—à–æ—Ç: complete_system_result.png")
                    print(f"üìß –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ email: {application['personal_data']['email']}")
                    print(f"üì± –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ —Ç–µ–ª–µ—Ñ–æ–Ω: {application['personal_data']['phone']}")
                    
                else:
                    print("‚ùå –§–æ—Ä–º–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
                    
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
            finally:
                await browser.close()


async def main():
    system = CompleteApplicationSystem()
    await system.test_complete_system()


if __name__ == "__main__":
    asyncio.run(main())
