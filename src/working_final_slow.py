import asyncio
import os
import subprocess
import time
from playwright.async_api import async_playwright

async def main():
    fnr = os.getenv("FN_NUMBER")
    password = os.getenv("BANKID_PWD")
    display = ":99"

    print("üñ•Ô∏è Starting display...")
    subprocess.run(["pkill", "-f", "Xvfb"], check=False)
    time.sleep(1)
    xvfb_process = subprocess.Popen(["Xvfb", display, "-screen", "0", "1920x1080x24", "-ac"])
    os.environ["DISPLAY"] = display
    time.sleep(2)
    print("‚úÖ Display started")

    try:
        async with async_playwright() as p:
            browser = await p.chromium.launch(headless=False, args=["--no-sandbox"])
            page = await browser.new_page()

            print("üåê STEP 1: Going to NAV...")
            await page.goto("https://aktivitetsplan.nav.no/aktivitet/ny/stilling")
            await page.wait_for_load_state("networkidle")

            print("‚úÖ STEP 2: Clicking BankID...")
            await page.evaluate("""() => {
                const elements = document.querySelectorAll('*');
                for (let el of elements) {
                    if ((el.textContent || '').trim() === 'BankID' && el.tagName === 'H2') {
                        el.click();
                        return;
                    }
                }
            }""")

            await asyncio.sleep(5)
            await page.wait_for_load_state("networkidle")

            print("‚úÖ STEP 3: Filling FNR:", fnr)
            await page.evaluate("""(fnr) => {
                const inputs = document.querySelectorAll('input');
                if (inputs[0]) {
                    inputs[0].value = fnr;
                    inputs[0].dispatchEvent(new Event('input', {bubbles: true}));
                }
            }""", fnr)

            await asyncio.sleep(2)

            print("‚úÖ STEP 4: Clicking Neste...")
            await page.evaluate("""() => {
                const buttons = document.querySelectorAll('button');
                for (let btn of buttons) {
                    if ((btn.textContent || '').toLowerCase().includes('neste')) {
                        btn.click();
                        return;
                    }
                }
            }""")

            await asyncio.sleep(5)

            print("üéØ STEP 5: COORDINATE CLICK on BankID-app...")
            await page.mouse.click(640, 338)

            print("üì± PUSH SENT! Please confirm on your mobile device")
            print("‚è∞ Waiting with 2-second intervals (60 seconds total)...")
            
            modal_found = False
            for i in range(30):  # 30 * 2 —Å–µ–∫—É–Ω–¥–∏ = 60 —Å–µ–∫—É–Ω–¥
                await asyncio.sleep(2)  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ 2 —Å–µ–∫—É–Ω–¥–∏
                check_num = i + 1
                print(f"‚è±Ô∏è Check {check_num}/30 ({check_num*2} seconds)")
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑'—è–≤–∏–ª–æ—Å—è –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è
                password_visible = await page.evaluate("""() => {
                    const inputs = document.querySelectorAll('input[type="password"]');
                    return inputs.length > 0;
                }""")
                
                if password_visible:
                    print("‚úÖ PASSWORD MODAL DETECTED!")
                    modal_found = True
                    break
                    
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
                page_text = await page.evaluate("""() => {
                    return document.body.innerText.toLowerCase();
                }""")
                
                if 'password' in page_text or 'passord' in page_text:
                    print("‚úÖ PASSWORD TEXT DETECTED!")
                    modal_found = True
                    break

            if not modal_found:
                print("‚ùå No password modal detected after 60 seconds")
                print("üîÑ Modal may not have appeared - extending wait time...")
                
                # –î–æ–¥–∞—Ç–∫–æ–≤–∏—Ö 30 —Å–µ–∫—É–Ω–¥ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
                for i in range(15):
                    await asyncio.sleep(2)
                    print(f"‚è±Ô∏è Extended wait {i+1}/15...")
                    
                    password_visible = await page.evaluate("""() => {
                        const inputs = document.querySelectorAll('input[type="password"]');
                        return inputs.length > 0;
                    }""")
                    
                    if password_visible:
                        print("‚úÖ PASSWORD MODAL FINALLY DETECTED!")
                        modal_found = True
                        break

            if modal_found:
                print("üîë STEP 7: Filling password...")
                
                # –ó–∞–ø–æ–≤–Ω—é—î–º–æ –ø–∞—Ä–æ–ª—å
                await page.evaluate("""(pwd) => {
                    const inputs = document.querySelectorAll('input[type="password"]');
                    if (inputs.length > 0) {
                        inputs[0].value = pwd;
                        inputs[0].focus();
                        inputs[0].dispatchEvent(new Event('input', {bubbles: true}));
                        inputs[0].dispatchEvent(new Event('change', {bubbles: true}));
                        console.log('Password filled');
                    }
                }""", password)
                
                await asyncio.sleep(3)  # –ü–∞—É–∑–∞ –ø—ñ—Å–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è

                print("üéØ STEP 8: Clicking Neste...")
                button_clicked = await page.evaluate("""() => {
                    const buttons = document.querySelectorAll('button');
                    for (let btn of buttons) {
                        const text = (btn.textContent || '').toLowerCase();
                        if (text.includes('neste')) {
                            btn.click();
                            console.log('Neste button clicked');
                            return true;
                        }
                    }
                    return false;
                }""")
                
                if button_clicked:
                    print("‚úÖ Neste button clicked")
                else:
                    print("‚ö†Ô∏è Neste button not found")

                print("‚úÖ STEP 9: Waiting for redirect (20 seconds)...")
                
                # –ß–µ–∫–∞—î–º–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç 20 —Å–µ–∫—É–Ω–¥
                for i in range(10):  # 10 * 2 —Å–µ–∫—É–Ω–¥–∏ = 20 —Å–µ–∫—É–Ω–¥
                    await asyncio.sleep(2)
                    current_url = page.url
                    print(f"‚è±Ô∏è Redirect check {i+1}/10 - URL: {current_url}")
                    
                    if 'nav.no' in current_url:
                        print("üéâ SUCCESS! Redirected back to NAV!")
                        break

                final_url = page.url
                print(f"üéâ COMPLETE! Final URL: {final_url}")
                
                if 'nav.no' in final_url:
                    print("‚úÖ AUTHENTICATION SUCCESS!")
                else:
                    print("‚ö†Ô∏è Still on BankID - authentication may need more time")
            else:
                print("‚ùå Could not detect password modal - please try manual confirmation")

            await browser.close()

    finally:
        xvfb_process.terminate()
        subprocess.run(["pkill", "-f", "Xvfb"], check=False)
        print("üî¥ Display stopped")

if __name__ == "__main__":
    asyncio.run(main())
