import asyncio
import os
import subprocess
import time
from playwright.async_api import async_playwright

async def main():
    fnr = os.getenv("FN_NUMBER")
    password = os.getenv("BANKID_PWD")
    display = ":99"

    print("üñ•Ô∏è Starting display...")
    subprocess.run(["pkill", "-f", "Xvfb"], check=False)
    time.sleep(1)
    xvfb_process = subprocess.Popen(["Xvfb", display, "-screen", "0", "1920x1080x24", "-ac"])
    os.environ["DISPLAY"] = display
    time.sleep(2)
    print("‚úÖ Display started")

    try:
        async with async_playwright() as p:
            browser = await p.chromium.launch(headless=False, args=["--no-sandbox"])
            page = await browser.new_page()

            print("üåê STEP 1: Going to NAV...")
            await page.goto("https://aktivitetsplan.nav.no/aktivitet/ny/stilling")
            await page.wait_for_load_state("networkidle")

            print("‚úÖ STEP 2: Clicking BankID...")
            await page.evaluate("""() => {
                const elements = document.querySelectorAll('*');
                for (let el of elements) {
                    if ((el.textContent || '').trim() === 'BankID' && el.tagName === 'H2') {
                        el.click();
                        return;
                    }
                }
            }""")

            await asyncio.sleep(5)
            await page.wait_for_load_state("networkidle")

            print("‚úÖ STEP 3: Filling FNR:", fnr)
            await page.evaluate("""(fnr) => {
                const inputs = document.querySelectorAll('input');
                if (inputs[0]) {
                    inputs[0].value = fnr;
                    inputs[0].dispatchEvent(new Event('input', {bubbles: true}));
                }
            }""", fnr)

            await asyncio.sleep(2)

            print("‚úÖ STEP 4: Clicking Neste...")
            await page.evaluate("""() => {
                const buttons = document.querySelectorAll('button');
                for (let btn of buttons) {
                    if ((btn.textContent || '').toLowerCase().includes('neste')) {
                        btn.click();
                        return;
                    }
                }
            }""")

            await asyncio.sleep(5)

            print("üéØ STEP 5: COORDINATE CLICK on BankID-app (ONLY hidden button)...")
            await page.mouse.click(640, 338)

            print("üì± PUSH SENT! Please confirm on your mobile now!")
            print("‚è∞ Waiting for modal with broad selectors...")
            
            # –ß–µ–∫–∞—î–º–æ –ø–æ—è–≤—É –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –∑ —à–∏—Ä–æ–∫–∏–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
            modal_found = False
            for i in range(60):  # 2 —Ö–≤–∏–ª–∏–Ω–∏ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
                await asyncio.sleep(1)
                if i % 5 == 0:  # –õ–æ–≥ –∫–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥
                    print(f"‚è±Ô∏è {i+1}/60 seconds waiting for modal...")
                
                # –®–∏—Ä–æ–∫–∏–π –ø–æ—à—É–∫ –ø–æ–ª—ñ–≤ –≤–≤–µ–¥–µ–Ω–Ω—è (–Ω–µ —Ç—ñ–ª—å–∫–∏ password)
                password_field = await page.query_selector('input[type="password"]')
                if not password_field:
                    # –®—É–∫–∞—î–º–æ –ø–æ–ª—è –∑ —Ç–µ–∫—Å—Ç–æ–º –ø—Ä–æ –ø–∞—Ä–æ–ª—å
                    password_field = await page.query_selector('input[placeholder*="assord"]')
                if not password_field:
                    # –®—É–∫–∞—î–º–æ –ø–æ–ª—è –∑ placeholder –ø—Ä–æ –∫–æ–¥
                    password_field = await page.query_selector('input[placeholder*="ode"]')
                if not password_field:
                    # –®—É–∫–∞—î–º–æ –ø–æ–ª—è –ø–æ–±–ª–∏–∑—É —Ç–µ–∫—Å—Ç—É "password"
                    password_field = await page.evaluate("""() => {
                        const labels = document.querySelectorAll('*');
                        for (let label of labels) {
                            if ((label.textContent || '').toLowerCase().includes('passord') || 
                                (label.textContent || '').toLowerCase().includes('password')) {
                                const nearby = label.parentElement?.querySelector('input') || 
                                             label.nextElementSibling?.querySelector?.('input') ||
                                             label.querySelector('input');
                                if (nearby) return nearby;
                            }
                        }
                        return null;
                    }""")
                
                if password_field:
                    print("‚úÖ PASSWORD FIELD FOUND!")
                    modal_found = True
                    break
                
                # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑'—è–≤–∏–≤—Å—è –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç
                page_text = await page.inner_text('body')
                if any(word in page_text.lower() for word in ['dit bankid-passord', 'fyll inn', 'password', 'passord']):
                    print("‚úÖ PASSWORD TEXT DETECTED - searching again...")
                    continue

            if modal_found:
                print("üîë STEP 7: Filling password with standard Playwright methods...")
                
                # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è –∑–Ω–æ–≤—É
                password_selectors = [
                    'input[type="password"]',
                    'input[placeholder*="assord"]', 
                    'input[placeholder*="ode"]'
                ]
                
                filled = False
                for selector in password_selectors:
                    try:
                        field = await page.query_selector(selector)
                        if field and await field.is_visible():
                            await field.fill(password)  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π Playwright –º–µ—Ç–æ–¥
                            print(f"‚úÖ Password filled using {selector}")
                            filled = True
                            break
                    except Exception as e:
                        print(f"‚ö†Ô∏è Failed with {selector}: {e}")
                
                if not filled:
                    print("‚ö†Ô∏è Trying alternative fill method...")
                    await page.evaluate("""(pwd) => {
                        const inputs = document.querySelectorAll('input');
                        for (let input of inputs) {
                            if (input.offsetParent !== null) {  // visible
                                input.value = pwd;
                                input.dispatchEvent(new Event('input', {bubbles: true}));
                            }
                        }
                    }""", password)

                await asyncio.sleep(2)

                print("üéØ STEP 8: Clicking Neste with standard Playwright click...")
                
                # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–Ω–æ–ø–∫—É Neste
                next_selectors = [
                    'button:has-text("Neste")',
                    'button:has-text("neste")', 
                    'text=Neste',
                    'text=neste'
                ]
                
                clicked = False
                for selector in next_selectors:
                    try:
                        button = await page.query_selector(selector)
                        if button and await button.is_visible():
                            await button.click()  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π Playwright –º–µ—Ç–æ–¥
                            print(f"‚úÖ Neste clicked using {selector}")
                            clicked = True
                            break
                    except Exception as e:
                        print(f"‚ö†Ô∏è Failed with {selector}: {e}")
                
                if not clicked:
                    print("‚ö†Ô∏è Trying alternative click method...")
                    await page.evaluate("""() => {
                        const buttons = document.querySelectorAll('button');
                        for (let btn of buttons) {
                            if ((btn.textContent || '').toLowerCase().includes('neste')) {
                                btn.click();
                                return;
                            }
                        }
                    }""")

                print("‚úÖ STEP 9: Waiting for redirect...")
                
                # –ß–µ–∫–∞—î–º–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç
                for i in range(20):
                    await asyncio.sleep(1)
                    current_url = page.url
                    if i % 3 == 0:
                        print(f"‚è±Ô∏è Redirect check {i+1}/20 - URL: {current_url}")
                    
                    if 'nav.no' in current_url:
                        print("üéâ SUCCESS! Redirected back to NAV!")
                        break

                final_url = page.url
                print(f"üéâ FINAL URL: {final_url}")
                
                if 'nav.no' in final_url:
                    print("‚úÖ AUTHENTICATION COMPLETED SUCCESSFULLY!")
                else:
                    print("‚ö†Ô∏è Still on BankID - may need more time")
                    
            else:
                print("‚ùå Modal never appeared or field not found")

            await browser.close()

    finally:
        xvfb_process.terminate()
        subprocess.run(["pkill", "-f", "Xvfb"], check=False)
        print("üî¥ Display stopped")

if __name__ == "__main__":
    asyncio.run(main())
