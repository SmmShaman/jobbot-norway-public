"""
Production NAV Workflow - Semi-automated BankID login with Telegram integration
"""
import asyncio
import os
from datetime import datetime
from pathlib import Path
from playwright.async_api import async_playwright
from .telegram_bot import TelegramBot

class ProductionNAVWorkflow:
    def __init__(self, username):
        self.username = username
        self.telegram_bot = TelegramBot()
        self.fnr = os.getenv("FN_NUMBER")
        self.password = os.getenv("BANKID_PWD")

    async def run_semi_automated_nav_workflow(self, applied_jobs):
        """–ó–∞–ø—É—Å–∫–∞—î semi-automated NAV workflow –∑ Telegram –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é."""
        
        print(f"üöÄ Starting Production NAV Workflow for {self.username}")
        print(f"üìä Jobs to report: {len(applied_jobs)}")
        
        try:
            # –ö—Ä–æ–∫ 1: –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –¥–æ BankID
            result = await self._navigate_to_bankid_push()
            
            if result["status"] == "success":
                # –ö—Ä–æ–∫ 2: –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ Telegram —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó
                await self._send_user_instructions(result["url"])
                
                # –ö—Ä–æ–∫ 3: –û—á—ñ–∫—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
                confirmation = await self._wait_for_user_confirmation()
                
                if confirmation["status"] == "confirmed":
                    # –ö—Ä–æ–∫ 4: –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—é
                    final_result = await self._complete_nav_reporting(applied_jobs)
                    return final_result
                else:
                    return {"status": "timeout", "message": "User confirmation timeout"}
            else:
                return result
                
        except Exception as e:
            error_msg = f"‚ùå Production NAV Workflow Error: {str(e)}"
            await self.telegram_bot.send_message(error_msg)
            return {"status": "error", "error": str(e)}

    async def _navigate_to_bankid_push(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –¥–æ—Ö–æ–¥–∏—Ç—å –¥–æ BankID push notification."""
        
        async with async_playwright() as p:
            browser = await p.chromium.launch(
                headless=True,
                args=['--no-sandbox', '--disable-dev-shm-usage']
            )
            page = await browser.new_page()
            
            try:
                print("üåê Navigating to NAV...")
                await page.goto('https://aktivitetsplan.nav.no/aktivitet/ny/stilling', timeout=30000)
                await page.wait_for_load_state('networkidle')
                
                # –Ø–∫—â–æ —Ä–µ–¥—ñ—Ä–µ–∫—Ç –Ω–∞ ID-porten
                if 'idporten.no' in page.url:
                    print("üîê Detected ID-porten, selecting BankID...")
                    
                    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —ñ –∫–ª—ñ–∫–∞—î–º–æ BankID
                    bankid_button = await page.query_selector('button:has-text("BankID")')
                    if not bankid_button:
                        bankid_button = await page.query_selector('a:has-text("BankID")')
                    
                    if bankid_button:
                        await bankid_button.click()
                        await page.wait_for_load_state('networkidle')
                        print("‚úÖ BankID selected")
                    
                    # –ó–∞–ø–æ–≤–Ω—é—î–º–æ FNR
                    fnr_input = await page.query_selector('input[name="fodselsnummer"], input[type="text"]')
                    if fnr_input and self.fnr:
                        await fnr_input.fill(self.fnr)
                        print(f"‚úÖ FNR filled: {self.fnr[:6]}...")
                        
                        # –ö–ª—ñ–∫–∞—î–º–æ Neste
                        next_button = await page.query_selector('button:has-text("Neste"), input[value="Neste"]')
                        if next_button:
                            await next_button.click()
                            await page.wait_for_timeout(3000)
                            print("‚úÖ Clicked Neste - BankID push should be sent")
                
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ screenshot
                screenshot_path = f'/app/data/users/{self.username}/nav_production_state.png'
                await page.screenshot(path=screenshot_path)
                
                current_url = page.url
                print(f"üì± Ready for user BankID confirmation at: {current_url}")
                
                return {
                    "status": "success",
                    "url": current_url,
                    "message": "Ready for BankID push confirmation"
                }
                
            except Exception as e:
                print(f"‚ùå Navigation error: {e}")
                return {"status": "error", "error": str(e)}
            finally:
                await browser.close()

    async def _send_user_instructions(self, current_url):
        """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –¥–µ—Ç–∞–ª—å–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É."""
        
        message = f"""
üîî <b>NAV BankID Login Required</b>

<b>STEP 1:</b> Open your BankID app on your phone
<b>STEP 2:</b> You should have received a push notification
<b>STEP 3:</b> Approve the BankID request in the app
<b>STEP 4:</b> Reply "LOGGED_IN" when complete

<b>Current URL:</b> {current_url}

‚è∞ <b>Timeout:</b> 10 minutes
ü§ñ The system will continue automatically after your confirmation.

<i>If you don't see the push notification, check that BankID app is updated and try refreshing the browser.</i>
        """
        
        success = await self.telegram_bot.send_message(message)
        if success:
            print("üì± User instructions sent via Telegram")
        else:
            print("‚ùå Failed to send Telegram instructions")

    async def _wait_for_user_confirmation(self, timeout_minutes=10):
        """–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—Å–∏–º—É–ª—è—Ü—ñ—è)."""
        
        print(f"‚è≥ Waiting for user confirmation ({timeout_minutes} minutes)...")
        
        # –í production —Ç—É—Ç –±—É–¥–µ Telegram bot listener
        # —è–∫–∏–π —Å–ª—É—Ö–∞—î "LOGGED_IN" –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        
        for minute in range(timeout_minutes):
            print(f"  ‚è±Ô∏è  {minute + 1}/{timeout_minutes} minutes elapsed...")
            await asyncio.sleep(60)  # 1 —Ö–≤–∏–ª–∏–Ω–∞
            
            # TODO: –Ü–Ω—Ç–µ–≥—Ä—É–≤–∞—Ç–∏ –∑ Telegram bot –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            # if telegram_bot.check_for_user_confirmation():
            #     return {"status": "confirmed"}
        
        # –ü–æ–∫–∏ —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ timeout –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        await self.telegram_bot.send_message("‚è∞ Login confirmation timeout. Please try again later.")
        return {"status": "timeout"}

    async def _complete_nav_reporting(self, applied_jobs):
        """–ó–∞–≤–µ—Ä—à—É—î NAV –∑–≤—ñ—Ç—É–≤–∞–Ω–Ω—è –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –ª–æ–≥—ñ–Ω—É."""
        
        print(f"üìù Completing NAV reporting for {len(applied_jobs)} jobs...")
        
        async with async_playwright() as p:
            browser = await p.chromium.launch(headless=True)
            page = await browser.new_page()
            
            try:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ª–æ–≥—ñ–Ω–µ–Ω–∏–π
                await page.goto('https://aktivitetsplan.nav.no/aktivitet/ny/stilling')
                await page.wait_for_load_state('networkidle')
                
                if 'aktivitetsplan.nav.no' in page.url:
                    print("‚úÖ User is logged in - proceeding with reporting")
                    
                    successful_reports = 0
                    
                    for i, job in enumerate(applied_jobs):
                        print(f"üìÑ Reporting job {i+1}: {job.get('title', 'Unknown')[:50]}...")
                        
                        # –ó–∞–ø–æ–≤–Ω—é—î–º–æ —Ñ–æ—Ä–º—É NAV
                        form_success = await self._fill_nav_form(page, job)
                        
                        if form_success:
                            successful_reports += 1
                            print(f"‚úÖ Job {i+1} reported successfully")
                        else:
                            print(f"‚ùå Failed to report job {i+1}")
                        
                        # –ü–∞—É–∑–∞ –º—ñ–∂ –∑–≤—ñ—Ç–∞–º–∏
                        await asyncio.sleep(2)
                    
                    # –§—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                    summary_msg = f"""
üéâ <b>NAV Reporting Complete!</b>

<b>Total jobs:</b> {len(applied_jobs)}
<b>Successfully reported:</b> {successful_reports}
<b>Failed:</b> {len(applied_jobs) - successful_reports}
<b>Completion time:</b> {datetime.now().strftime('%H:%M:%S')}

‚úÖ All job applications have been reported to NAV as required.
                    """
                    
                    await self.telegram_bot.send_message(summary_msg)
                    
                    return {
                        "status": "success",
                        "total_jobs": len(applied_jobs),
                        "successful_reports": successful_reports,
                        "failed_reports": len(applied_jobs) - successful_reports
                    }
                
                else:
                    error_msg = "‚ùå User not logged in to NAV. Manual intervention required."
                    await self.telegram_bot.send_message(error_msg)
                    return {"status": "error", "message": "Not logged in"}
                    
            except Exception as e:
                error_msg = f"‚ùå NAV reporting error: {str(e)}"
                await self.telegram_bot.send_message(error_msg)
                return {"status": "error", "error": str(e)}
            finally:
                await browser.close()

    async def _fill_nav_form(self, page, job_data):
        """–ó–∞–ø–æ–≤–Ω—é—î NAV —Ñ–æ—Ä–º—É –¥–ª—è –æ–¥–Ω–æ—ó –∑–∞—è–≤–∫–∏."""
        
        try:
            # –û—á—ñ–∫—É—î–º–æ —Ñ–æ—Ä–º—É
            await page.wait_for_selector('input, select', timeout=5000)
            
            # –ó–∞–ø–æ–≤–Ω—é—î–º–æ –ø–æ–ª—è
            title_input = await page.query_selector('input[placeholder*="stilling"], input[name*="titel"]')
            if title_input:
                await title_input.fill(job_data.get('title', ''))
            
            company_input = await page.query_selector('input[placeholder*="bedrift"], input[name*="company"]')
            if company_input:
                await company_input.fill(job_data.get('company', ''))
            
            # –î–∞—Ç–∞ –ø–æ–¥–∞—á—ñ
            date_input = await page.query_selector('input[type="date"]')
            if date_input:
                today = datetime.now().strftime('%Y-%m-%d')
                await date_input.fill(today)
            
            # Submit –∫–Ω–æ–ø–∫–∞
            submit_button = await page.query_selector('button[type="submit"], button:has-text("Send"), button:has-text("Lagre")')
            if submit_button:
                await submit_button.click()
                await page.wait_for_timeout(2000)
                return True
            
            return False
            
        except Exception as e:
            print(f"Form filling error: {e}")
            return False

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –∑ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞
async def run_production_nav_workflow(username, applied_jobs):
    """–ó–∞–ø—É—Å–∫ production NAV workflow."""
    workflow = ProductionNAVWorkflow(username)
    return await workflow.run_semi_automated_nav_workflow(applied_jobs)

if __name__ == "__main__":
    import sys
    if len(sys.argv) > 1:
        username = sys.argv[1]
        # –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
        test_jobs = [
            {"title": "Test Job 1", "company": "Test Company 1"},
            {"title": "Test Job 2", "company": "Test Company 2"}
        ]
        result = asyncio.run(run_production_nav_workflow(username, test_jobs))
        print(f"Result: {result}")
    else:
        print("Usage: python production_nav_workflow.py <username>")
