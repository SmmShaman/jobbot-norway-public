"""AI-powered form analyzer with text-based selectors for job application forms."""
import os
import json
import base64
from typing import Dict, List, Any
from openai import AzureOpenAI


class ImprovedAIFormAnalyzer:
    def __init__(self):
        self.client = AzureOpenAI(
            azure_endpoint=os.getenv("OPENAI_ENDPOINT"),
            api_key=os.getenv("OPENAI_KEY"),
            api_version="2024-05-01-preview"
        )

    async def analyze_application_form(self, screenshot_path: str, html_content: str,
                                     job_title: str, company: str) -> Dict[str, Any]:
        """Analyze job application form and return text-based filling instructions."""
        
        # –î–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä—ñ–Ω—à–æ—Ç—É
        if not os.path.exists(screenshot_path):
            return self._get_fallback_analysis()
        
        # –ù–û–í–ò–ô –ü–†–û–ú–ü–¢ –∑ —Ç–µ–∫—Å—Ç–æ–≤–∏–º–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º–∏
        prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Ñ–æ—Ä–º—É –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–æ–±–æ—Ç—É.

–í–∞–∫–∞–Ω—Å—ñ—è: {job_title}
–ö–æ–º–ø–∞–Ω—ñ—è: {company}

HTML –∫–æ–¥ —Ñ–æ—Ä–º–∏:
{html_content[:2000]}...

–ó–ê–í–î–ê–ù–ù–Ø: –°—Ç–≤–æ—Ä–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏.
–í–ê–ñ–õ–ò–í–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –¢–ï–ö–°–¢–û–í–Ü —Å–µ–ª–µ–∫—Ç–æ—Ä–∏ Playwright, –ù–ï CSS!

Playwright —Å–µ–ª–µ–∫—Ç–æ—Ä–∏:
- page.fill('input[placeholder*="email"]', value)
- page.click('text=Submit Application')
- page.fill('label:has-text("Name") >> input', value)

–ü–û–í–ï–†–ù–ò JSON:
{{
    "page_type": "application_form",
    "form_fields": [
        {{
            "field_type": "email",
            "label": "Email",
            "playwright_selectors": [
                "input[type='email']",
                "input[placeholder*='email']"
            ],
            "fill_value": "{{email}}",
            "required": true
        }}
    ],
    "submit_button": {{
        "playwright_selectors": ["text=Submit", "button[type='submit']"]
    }}
}}
"""

        try:
            # –ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç –±–µ–∑ AI –ø–æ–∫–∏ —â–æ
            print(f"üîç –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ñ–æ—Ä–º—É –¥–ª—è: {job_title}")
            print(f"üìù HTML –¥–æ–≤–∂–∏–Ω–∞: {len(html_content)} —Å–∏–º–≤–æ–ª—ñ–≤")
            
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return self._get_fallback_analysis()
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É: {e}")
            return self._get_fallback_analysis()

    def _get_fallback_analysis(self) -> Dict[str, Any]:
        """Return fallback analysis when AI fails."""
        return {
            "page_type": "application_form",
            "form_fields": [
                {
                    "field_type": "text",
                    "label": "Name",
                    "playwright_selectors": [
                        "input[placeholder*='name']",
                        "input[placeholder*='navn']",
                        "label:has-text('Name') >> input"
                    ],
                    "fill_value": "{name}",
                    "required": True
                },
                {
                    "field_type": "email",
                    "label": "Email",
                    "playwright_selectors": [
                        "input[type='email']",
                        "input[placeholder*='email']",
                        "label:has-text('Email') >> input"
                    ],
                    "fill_value": "{email}",
                    "required": True
                }
            ],
            "submit_button": {
                "playwright_selectors": [
                    "text=Submit",
                    "text=Send",
                    "button[type='submit']"
                ]
            },
            "cookies_button": {
                "found": True,
                "playwright_selectors": [
                    "text=Accept",
                    "text=Agree"
                ]
            }
        }


# Test function
async def test_improved_analyzer():
    """Test the improved form analyzer."""
    analyzer = ImprovedAIFormAnalyzer()
    
    result = await analyzer.analyze_application_form(
        screenshot_path="/app/data/screenshots/test_form.png",
        html_content="<form><input placeholder='Your email' type='email'><button>Submit</button></form>",
        job_title="Python Developer",
        company="Test Company"
    )
    
    print("üîç Analysis Result:")
    print(json.dumps(result, indent=2, ensure_ascii=False))


if __name__ == "__main__":
    import asyncio
    asyncio.run(test_improved_analyzer())
