import os
import sys
sys.path.append('/app/src')

from workflow_integration import WorkflowIntegration
from local_storage_manager import LocalStorageManager
from resume_loader import create_ai_prompt
from ai_analyzer import analyze_job_relevance
from telegram_bot import TelegramBot
from datetime import datetime

class WorkflowWithScreenshots(WorkflowIntegration):
    def __init__(self, username):
        self.username = username
        self.telegram = TelegramBot()
        self.storage = LocalStorageManager(self.username)
        
    def take_step_screenshot(self, page, step_name, job_data):
        """–†–æ–±–∏—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î –∫—Ä–æ–∫"""
        try:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f'{self.username}_{step_name.replace(" ", "_")}_{timestamp}.png'
            screenshot_path = f'/app/data/screenshots/{self.username}/{filename}'
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É
            os.makedirs(f'/app/data/screenshots/{self.username}', exist_ok=True)
            
            # –†–æ–±–∏–º–æ —Å–∫—Ä—ñ–Ω—à–æ—Ç
            page.screenshot(path=screenshot_path, full_page=True)
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ storage
            self.storage.add_job_step(job_data, step_name, screenshot_path)
            
            print(f'üì∏ –°–∫—Ä—ñ–Ω—à–æ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {filename}')
            return screenshot_path
            
        except Exception as e:
            print(f'‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫—Ä—ñ–Ω—à–æ—Ç—É: {e}')
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫—Ä–æ–∫ –±–µ–∑ —Å–∫—Ä—ñ–Ω—à–æ—Ç—É
            self.storage.add_job_step(job_data, step_name)
            return None
    
    def analyze_jobs_with_logging(self, jobs):
        """–ê–Ω–∞–ª—ñ–∑—É—î –≤–∞–∫–∞–Ω—Å—ñ—ó –∑ –ª–æ–≥—É–≤–∞–Ω–Ω—è–º –∫–æ–∂–Ω–æ–≥–æ –∫—Ä–æ–∫—É"""
        user_ai_text = create_ai_prompt(self.username)
        
        analyzed_jobs = []
        for job in jobs:
            try:
                # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –ø—Ä–æ –≤–∞–∫–∞–Ω—Å—ñ—é
                job_data = {
                    'title': job['title'],
                    'company': job.get('company', '–ù–µ–≤—ñ–¥–æ–º–æ'),
                    'url': job['url']
                }
                
                # –ö—Ä–æ–∫ 1: –ü–æ—á–∞—Ç–æ–∫ –∞–Ω–∞–ª—ñ–∑—É
                self.storage.add_job_step(job_data, '–ü–æ—á–∞—Ç–æ–∫ AI –∞–Ω–∞–ª—ñ–∑—É')
                
                # –ö—Ä–æ–∫ 2: AI –∞–Ω–∞–ª—ñ–∑
                analysis = analyze_job_relevance(job, user_ai_text[:500], user_ai_text)
                job['analysis'] = analysis
                analyzed_jobs.append(job)
                
                # –ö—Ä–æ–∫ 3: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª—ñ–∑—É
                job_data.update({
                    'ai_score': f'{analysis["relevance_score"]}%',
                    'recommendation': analysis['recommendation']
                })
                self.storage.add_job_step(job_data, 'AI –∞–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
                
                print(f'‚úÖ {job["title"]}: {analysis["relevance_score"]}% - {analysis["recommendation"]}')
                
            except Exception as e:
                print(f'‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É {job["title"]}: {e}')
                job['analysis'] = {'relevance_score': 0, 'is_relevant': False, 'recommendation': 'SKIP'}
                analyzed_jobs.append(job)
        
        return analyzed_jobs

