"""Complete test of improved workflow with real job application (headless)."""
import asyncio
import os
from playwright.async_api import async_playwright
from improved_ai_form_analyzer import ImprovedAIFormAnalyzer
from improved_smart_filler import ImprovedSmartFiller


class ImprovedWorkflowTest:
    def __init__(self):
        self.analyzer = ImprovedAIFormAnalyzer()
        self.filler = ImprovedSmartFiller()
        
    async def ensure_screenshots_dir(self):
        """Ensure screenshots directory exists."""
        screenshots_dir = "/app/data/screenshots"
        os.makedirs(screenshots_dir, exist_ok=True)
        return screenshots_dir
        
    async def test_real_job_application(self):
        """Test complete workflow with real job application."""
        print("üöÄ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ü–û–ö–†–ê–©–ï–ù–û–ì–û WORKFLOW")
        print("=" * 50)
        
        await self.ensure_screenshots_dir()
        
        # –†–µ–∞–ª—å–Ω–∞ –≤–∞–∫–∞–Ω—Å—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        job_data = {
            "title": "Python Developer",
            "company": "KillNoise",
            "url": "https://killnoise.com/nb/pages/jobs-at-killnoise"
        }
        
        user_data = {
            "name": "Vitalii Berbeha",
            "email": "vitalii.berbeha@example.com",
            "phone": "+47 123 45 678"
        }
        
        async with async_playwright() as p:
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±—Ä–∞—É–∑–µ—Ä –≤ headless —Ä–µ–∂–∏–º—ñ
            browser = await p.chromium.launch(
                headless=True,  # –û–±–æ–≤'—è–∑–∫–æ–≤–æ –¥–ª—è Docker
                args=['--no-sandbox', '--disable-dev-shm-usage']
            )
            page = await browser.new_page()
            
            try:
                print(f"üîç –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞: {job_data['url']}")
                await page.goto(job_data['url'], timeout=30000)
                await page.wait_for_timeout(5000)
                
                # –†–æ–±–∏–º–æ —Å–∫—Ä—ñ–Ω—à–æ—Ç –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
                screenshot_path = "/app/data/screenshots/improved_workflow_start.png"
                await page.screenshot(path=screenshot_path, full_page=True)
                print(f"üì∏ –°–∫—Ä—ñ–Ω—à–æ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {screenshot_path}")
                
                # –û—Ç—Ä–∏–º—É—î–º–æ HTML
                html_content = await page.content()
                print(f"üìÑ HTML –æ—Ç—Ä–∏–º–∞–Ω–æ: {len(html_content)} —Å–∏–º–≤–æ–ª—ñ–≤")
                
                # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É
                print("\nü§ñ –ê–ù–ê–õ–Ü–ó –°–¢–û–†–Ü–ù–ö–ò")
                print("-" * 30)
                analysis = await self.analyzer.analyze_application_form(
                    screenshot_path=screenshot_path,
                    html_content=html_content,
                    job_title=job_data['title'],
                    company=job_data['company']
                )
                
                print(f"üìä –¢–∏–ø —Å—Ç–æ—Ä—ñ–Ω–∫–∏: {analysis['page_type']}")
                print(f"üìù –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—ñ–≤: {len(analysis['form_fields'])}")
                
                # –û–±—Ä–æ–±–ª—è—î–º–æ cookies
                print("\nüç™ –°–ü–†–û–ë–ê –û–ë–†–û–ë–ö–ò COOKIES")
                print("-" * 30)
                cookies_success = await self.filler.handle_cookies(page, analysis['cookies_button'])
                if cookies_success:
                    await page.wait_for_timeout(2000)
                    print("‚úÖ Cookies –æ–±—Ä–æ–±–ª–µ–Ω—ñ")
                else:
                    print("‚ÑπÔ∏è Cookies –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ")
                
                # –®—É–∫–∞—î–º–æ —Ñ–æ—Ä–º—É –∑–∞—è–≤–∫–∏
                print("\nüîç –ü–û–®–£–ö –§–û–†–ú–ò –ó–ê–Ø–í–ö–ò")
                print("-" * 25)
                
                application_selectors = [
                    "text=Apply",
                    "text=S√∏k stilling", 
                    "a:has-text('Apply')",
                    "button:has-text('Apply')",
                    "[href*='application']",
                    "[href*='apply']"
                ]
                
                application_found = False
                for selector in application_selectors:
                    try:
                        elements = await page.query_selector_all(selector)
                        if elements:
                            print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ: {selector}")
                            await elements[0].click()
                            await page.wait_for_timeout(3000)
                            application_found = True
                            break
                        else:
                            print(f"‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {selector}")
                    except Exception as e:
                        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑ {selector}: {str(e)[:50]}...")
                        continue
                
                # –ü—Ä–æ–±—É—î–º–æ –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ –ø–æ–ª—è
                print(f"\nüìù –ó–ê–ü–û–í–ù–ï–ù–ù–Ø –ü–û–õ–Ü–í")
                print("-" * 20)
                filled_count = 0
                for field in analysis['form_fields']:
                    success = await self.filler.smart_fill_field(page, field, user_data)
                    if success:
                        filled_count += 1
                    await page.wait_for_timeout(1000)
                
                print(f"‚úÖ –ó–∞–ø–æ–≤–Ω–µ–Ω–æ –ø–æ–ª—ñ–≤: {filled_count}/{len(analysis['form_fields'])}")
                
                # –§—ñ–Ω–∞–ª—å–Ω–∏–π —Å–∫—Ä—ñ–Ω—à–æ—Ç
                await page.screenshot(path="/app/data/screenshots/improved_final_result.png")
                print("üì∏ –§—ñ–Ω–∞–ª—å–Ω–∏–π —Å–∫—Ä—ñ–Ω—à–æ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ")
                
                print("\n‚ö†Ô∏è –§–æ—Ä–º–∞ –ù–ï –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ (—Ç—ñ–ª—å–∫–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)")
                
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ workflow: {e}")
                await page.screenshot(path="/app/data/screenshots/improved_error.png")
            
            finally:
                await browser.close()
        
        print("\nüéØ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù–û!")


async def main():
    tester = ImprovedWorkflowTest()
    await tester.test_real_job_application()


if __name__ == "__main__":
    asyncio.run(main())
